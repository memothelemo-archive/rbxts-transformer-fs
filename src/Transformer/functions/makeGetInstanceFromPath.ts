import ts, { factory } from "byots";

export function makeGetInstanceFromPath() {
	/*
		This translates to:
		function ___getInstanceFromPath<____T>(____descendants: string[]) {
			let ___currentIndex = 0;
			let ___lastParent: Instance = game;
			let ___currentInstance: Instance | undefined = game;

			while (___currentIndex < ____descendants.size() && ___currentInstance !== undefined) {
				game.GetService("RunService").Heartbeat.Wait();
				___lastParent = ___currentInstance;
				___currentInstance = ___currentInstance.FindFirstChild(____descendants[___currentIndex]);

				___currentIndex++;
			}

			if (___currentInstance === undefined) {
				let fullPath: string | string[] = ____descendants;
				fullPath.unshift("game");
				fullPath = fullPath.join(".");

				error(
					`Failed to find ${fullPath} because ${
						____descendants[___currentIndex]
					} is not a child of ${___lastParent.GetFullName()}`,
				);
			}

			return ___currentInstance as unknown as ____T;
		}
	*/
	return factory.createFunctionDeclaration(
		undefined,
		undefined,
		undefined,
		factory.createIdentifier("___getInstanceFromPath"),
		[
			factory.createTypeParameterDeclaration(
				factory.createIdentifier("____T"),
				undefined,
				undefined,
			),
		],
		[
			factory.createParameterDeclaration(
				undefined,
				undefined,
				undefined,
				factory.createIdentifier("____descendants"),
				undefined,
				factory.createArrayTypeNode(
					factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
				),
				undefined,
			),
		],
		undefined,
		factory.createBlock(
			[
				factory.createVariableStatement(
					undefined,
					factory.createVariableDeclarationList(
						[
							factory.createVariableDeclaration(
								factory.createIdentifier("___currentIndex"),
								undefined,
								undefined,
								factory.createNumericLiteral("0"),
							),
						],
						ts.NodeFlags.Let,
					),
				),
				factory.createVariableStatement(
					undefined,
					factory.createVariableDeclarationList(
						[
							factory.createVariableDeclaration(
								factory.createIdentifier("___lastParent"),
								undefined,
								factory.createTypeReferenceNode(
									factory.createIdentifier("Instance"),
									undefined,
								),
								factory.createIdentifier("game"),
							),
						],
						ts.NodeFlags.Let,
					),
				),
				factory.createVariableStatement(
					undefined,
					factory.createVariableDeclarationList(
						[
							factory.createVariableDeclaration(
								factory.createIdentifier("___currentInstance"),
								undefined,
								factory.createUnionTypeNode([
									factory.createTypeReferenceNode(
										factory.createIdentifier("Instance"),
										undefined,
									),
									factory.createKeywordTypeNode(
										ts.SyntaxKind.UndefinedKeyword,
									),
								]),
								factory.createIdentifier("game"),
							),
						],
						ts.NodeFlags.Let,
					),
				),
				factory.createWhileStatement(
					factory.createBinaryExpression(
						factory.createBinaryExpression(
							factory.createIdentifier("___currentIndex"),
							factory.createToken(ts.SyntaxKind.LessThanToken),
							factory.createCallExpression(
								factory.createPropertyAccessExpression(
									factory.createIdentifier("____descendants"),
									factory.createIdentifier("size"),
								),
								undefined,
								[],
							),
						),
						factory.createToken(
							ts.SyntaxKind.AmpersandAmpersandToken,
						),
						factory.createBinaryExpression(
							factory.createIdentifier("___currentInstance"),
							factory.createToken(
								ts.SyntaxKind.ExclamationEqualsEqualsToken,
							),
							factory.createIdentifier("undefined"),
						),
					),
					factory.createBlock(
						[
							factory.createExpressionStatement(
								factory.createCallExpression(
									factory.createPropertyAccessExpression(
										factory.createPropertyAccessExpression(
											factory.createCallExpression(
												factory.createPropertyAccessExpression(
													factory.createIdentifier(
														"game",
													),
													factory.createIdentifier(
														"GetService",
													),
												),
												undefined,
												[
													factory.createStringLiteral(
														"RunService",
													),
												],
											),
											factory.createIdentifier(
												"Heartbeat",
											),
										),
										factory.createIdentifier("Wait"),
									),
									undefined,
									[],
								),
							),
							factory.createExpressionStatement(
								factory.createBinaryExpression(
									factory.createIdentifier("___lastParent"),
									factory.createToken(
										ts.SyntaxKind.EqualsToken,
									),
									factory.createIdentifier(
										"___currentInstance",
									),
								),
							),
							factory.createExpressionStatement(
								factory.createBinaryExpression(
									factory.createIdentifier(
										"___currentInstance",
									),
									factory.createToken(
										ts.SyntaxKind.EqualsToken,
									),
									factory.createCallExpression(
										factory.createPropertyAccessExpression(
											factory.createIdentifier(
												"___currentInstance",
											),
											factory.createIdentifier(
												"FindFirstChild",
											),
										),
										undefined,
										[
											factory.createElementAccessExpression(
												factory.createIdentifier(
													"____descendants",
												),
												factory.createIdentifier(
													"___currentIndex",
												),
											),
										],
									),
								),
							),
							factory.createExpressionStatement(
								factory.createPostfixUnaryExpression(
									factory.createIdentifier("___currentIndex"),
									ts.SyntaxKind.PlusPlusToken,
								),
							),
						],
						true,
					),
				),
				factory.createIfStatement(
					factory.createBinaryExpression(
						factory.createIdentifier("___currentInstance"),
						factory.createToken(
							ts.SyntaxKind.EqualsEqualsEqualsToken,
						),
						factory.createIdentifier("undefined"),
					),
					factory.createBlock(
						[
							factory.createVariableStatement(
								undefined,
								factory.createVariableDeclarationList(
									[
										factory.createVariableDeclaration(
											factory.createIdentifier(
												"fullPath",
											),
											undefined,
											factory.createUnionTypeNode([
												factory.createKeywordTypeNode(
													ts.SyntaxKind.StringKeyword,
												),
												factory.createArrayTypeNode(
													factory.createKeywordTypeNode(
														ts.SyntaxKind
															.StringKeyword,
													),
												),
											]),
											factory.createIdentifier(
												"____descendants",
											),
										),
									],
									ts.NodeFlags.Let,
								),
							),
							factory.createExpressionStatement(
								factory.createCallExpression(
									factory.createPropertyAccessExpression(
										factory.createIdentifier("fullPath"),
										factory.createIdentifier("unshift"),
									),
									undefined,
									[factory.createStringLiteral("game")],
								),
							),
							factory.createExpressionStatement(
								factory.createBinaryExpression(
									factory.createIdentifier("fullPath"),
									factory.createToken(
										ts.SyntaxKind.EqualsToken,
									),
									factory.createCallExpression(
										factory.createPropertyAccessExpression(
											factory.createIdentifier(
												"fullPath",
											),
											factory.createIdentifier("join"),
										),
										undefined,
										[factory.createStringLiteral(".")],
									),
								),
							),
							factory.createExpressionStatement(
								factory.createCallExpression(
									factory.createIdentifier("error"),
									undefined,
									[
										factory.createTemplateExpression(
											factory.createTemplateHead(
												"Failed to find ",
												"Failed to find ",
											),
											[
												factory.createTemplateSpan(
													factory.createIdentifier(
														"fullPath",
													),
													factory.createTemplateMiddle(
														" because ",
														" because ",
													),
												),
												factory.createTemplateSpan(
													factory.createElementAccessExpression(
														factory.createIdentifier(
															"____descendants",
														),
														factory.createIdentifier(
															"___currentIndex",
														),
													),
													factory.createTemplateMiddle(
														" is not a child of ",
														" is not a child of ",
													),
												),
												factory.createTemplateSpan(
													factory.createCallExpression(
														factory.createPropertyAccessExpression(
															factory.createIdentifier(
																"___lastParent",
															),
															factory.createIdentifier(
																"GetFullName",
															),
														),
														undefined,
														[],
													),
													factory.createTemplateTail(
														"",
														"",
													),
												),
											],
										),
									],
								),
							),
						],
						true,
					),
					undefined,
				),
				factory.createReturnStatement(
					factory.createAsExpression(
						factory.createAsExpression(
							factory.createIdentifier("___currentInstance"),
							factory.createKeywordTypeNode(
								ts.SyntaxKind.UnknownKeyword,
							),
						),
						factory.createTypeReferenceNode(
							factory.createIdentifier("____T"),
							undefined,
						),
					),
				),
			],
			true,
		),
	);
}
